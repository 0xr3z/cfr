/*
 * Decompiled with CFR.
 */
package org.benf.cfr.tests;

import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.lang.Class;
import java.lang.Cloneable;
import java.lang.Object;
import java.lang.String;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.ArrayList$1;
import java.util.ArrayList$Itr;
import java.util.ArrayList$ListItr;
import java.util.ArrayList$SubList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.RandomAccess;

public class InnerClassTest3 {
    private final int x;

    public InnerClassTest3(int x) {
        this.x = x;
    }

    private int getX() {
        return new Inner1(new ArrayList()).getX(4);
    }

    static /* synthetic */ int access$000(InnerClassTest3 x0) {
        return x0.getX();
    }

    static /* synthetic */ int access$100(InnerClassTest3 x0) {
        return x0.x;
    }

    public class Inner1<E> {
        private final List<E> arg;
        final /* synthetic */ InnerClassTest3 this$0;

        public Inner1(List<E> arg) {
            this.arg = arg;
        }

        public int getX(int y) {
            return (2 + y + InnerClassTest3.access$000(this.this$0));
        }

        public class Inner2 {
            int z;
            final /* synthetic */ Inner1 this$1;

            private Inner2(int z) {
                this.z = z;
            }

            int getZ() {
                return (InnerClassTest3.access$100(this.this$1.this$0) + this.this$1.getX(3) + this.z);
            }

        }

    }

}
