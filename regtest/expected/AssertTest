/*
 * Decompiled with CFR.
 */
package org.benf.cfr.tests;

import java.io.Closeable;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.Serializable;
import java.lang.AbstractStringBuilder;
import java.lang.Appendable;
import java.lang.AssertionError;
import java.lang.CharSequence;
import java.lang.Class;
import java.lang.Class$1;
import java.lang.Class$2;
import java.lang.Class$3;
import java.lang.Class$4;
import java.lang.Class$EnclosingMethodInfo;
import java.lang.Class$MethodArray;
import java.lang.Class$ReflectionData;
import java.lang.ClassLoader;
import java.lang.ClassValue;
import java.lang.ClassValue$ClassValueMap;
import java.lang.Comparable;
import java.lang.Deprecated;
import java.lang.Error;
import java.lang.Object;
import java.lang.Package;
import java.lang.String;
import java.lang.String$1;
import java.lang.String$CaseInsensitiveComparator;
import java.lang.StringBuffer;
import java.lang.StringBuilder;
import java.lang.System;
import java.lang.Throwable;
import java.lang.annotation.Annotation;
import java.lang.ref.SoftReference;
import java.lang.reflect.AnnotatedElement;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Constructor;
import java.lang.reflect.Executable;
import java.lang.reflect.Field;
import java.lang.reflect.GenericDeclaration;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.net.URL;
import java.nio.charset.Charset;
import java.security.ProtectionDomain;
import java.util.Collection;
import java.util.Locale;
import java.util.Map;
import java.util.Map$Entry;
import java.util.Set;
import sun.reflect.ConstantPool;
import sun.reflect.ReflectionFactory;
import sun.reflect.ReflectionFactory$GetReflectionFactoryAction;
import sun.reflect.annotation.AnnotationType;
import sun.reflect.generics.factory.GenericsFactory;
import sun.reflect.generics.repository.ClassRepository;

public class AssertTest
{
    static final /* synthetic */ boolean $assertionsDisabled;

    public AssertTest(){
    }

    public void test1(String s){
        if ((!(AssertTest.$assertionsDisabled)) && (s.equals("Fred"))) {
            throw new AssertionError();
        }
        System.out.println(s);
    }

    static void <clinit>(){
        v14 = !(org.benf.cfr.tests.AssertTest.class.desiredAssertionStatus());
        AssertTest.$assertionsDisabled = v14;
    }

}
